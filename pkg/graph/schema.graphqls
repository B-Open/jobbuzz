scalar Time

"""
The input for registering a new user.
"""
input NewUserInput {
  email: String!
  password: String!
}

"""
The registered User.
"""
type User {
  id: Int!
  email: String!
  accessToken: String!
}

"""
The login result
"""
type LoginResult {
	accessToken: String!
}

"""
A single job listing item.
"""
type Job {
  id: Int!
  createdAt: Time!
  updatedAt: Time!
  title: String!
  company: String!
  salary: String!
  location: String!
}

"""
A single company item.
"""
type Company {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
}

input StringFilterInput {
  """
  Standard String Type Filters
  """
  contains: String
  notContains: String
  beginsWith: String
}

input PaginationInput {
  """
  Standard Pagination Inputs
  """
  limit: Int = 10
  offset: Int = 0
}

interface PaginatedOutput {
  """
  Interface for Paginated Outputs
  """
  to: Int!
  from: Int!
  per_page: Int!
  current_page: Int!
  total_page: Int!
  total: Int!
  error: StandardError
}

interface GenericError {
  """
  A generic error
  """
  message: String!
}

type StandardError implements GenericError {
  """
  A standard error with just a simple message
  """
  message: String!
}

type JobOutput implements PaginatedOutput {
  """
  Job output in Paginated Format
  """
  to: Int!
  from: Int!
  per_page: Int!
  current_page: Int!
  total_page: Int!
  total: Int!
  data: [Job!]!
  error: StandardError
}

type CompanyOutput implements PaginatedOutput {
  """
  Company output in Paginated Format
  """
  to: Int!
  from: Int!
  per_page: Int!
  current_page: Int!
  total_page: Int!
  total: Int!
  data: [Company!]!
  error: StandardError
}

union NewUser = LoginResult | StandardError

type Query {
  """
  Get all jobs.
  """
  jobs(search: StringFilterInput, pagination: PaginationInput!): JobOutput!
  """
  Get all companies.
  """
  companies(search: StringFilterInput, pagination: PaginationInput!): CompanyOutput!
}

type Mutation {
  """
  Create a new account for the current user.
  """
  registerAccount(input: NewUserInput!): NewUser!
}
